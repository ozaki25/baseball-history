
> baseball-history@0.1.0 test
> vitest


 DEV  v3.2.4 /Users/ozaki/app/baseball-history

stdout | src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出
対戦相手: オリックス

stdout | src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す
対戦相手: 広島東洋カープ

stdout | src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き）
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "6x5" (class: game-vs-teams__team-score)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "6x5" (class: game-vs-teams__team-score)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 1個
    0: "5" (class: , tag: SPAN)

stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出
会場要素の構造確認:
  会場要素数: 0

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: 札幌ドーム, 画像1個
    画像0: /images/logo_2004001.png
  チーム1: 札幌ドーム, 画像1個
    画像0: /images/other_team.png
ファイターズロゴをチーム0で発見: logo_2004001
ホーム/ビジター判定: ホーム
チーム位置による判定: ホーム
会場要素の構造確認:
  会場要素数: 2
  会場0: 札幌ドーム
  会場1: 札幌ドーム
会場抽出完了: 札幌ドーム
会場ホーム判定: 札幌ドーム -> ホーム (信頼度: high)
会場による判定: ホーム (会場: 札幌ドーム)
判定一致: ホーム (信頼度: high)

stdout | src/tests/parsers/teamExtractor.test.ts > teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合
チーム要素の構造確認:
  チーム0: 札幌ドーム, 画像1個
    画像0: /images/logo_2004001.png
  チーム1: 札幌ドーム, 画像1個
    画像0: /images/other_team.png
ファイターズロゴをチーム0で発見: logo_2004001
ホーム/ビジター判定: ホーム

stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > エスコンフィールドの場合
会場要素の構造確認:
  会場要素数: 0

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
試合HTML解析を開始...
対戦相手: 千葉ロッテ
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "6x5" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "6x5" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 1個
    0: "5" (class: , tag: SPAN)

stdout | src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > extractGameScore > 引き分けの場合
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "22" (class: game-vs-teams__team-score)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "22" (class: game-vs-teams__team-score)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 2個
    0: "2" (class: , tag: EM)
    1: "2" (class: , tag: SPAN)
  数字要素の最初の2個をスコアとして使用
スコア抽出完了: ホーム2 - ビジター2 (draw)

stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > ビジター球場の場合
会場要素の構造確認:
  会場要素数: 0

stdout | src/tests/parsers/teamExtractor.test.ts > teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合
チーム要素の構造確認:
  チーム0: 東京ドーム, 画像1個
    画像0: /images/other_team.png
  チーム1: 東京ドーム, 画像1個
    画像0: /images/logo_2004.png
ファイターズロゴをチーム1で発見: logo_2004
ホーム/ビジター判定: ビジター

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: 東京ドーム, 画像1個
    画像0: /images/other_team.png
  チーム1: 東京ドーム, 画像1個
    画像0: /images/logo_2004.png
ファイターズロゴをチーム1で発見: logo_2004
ホーム/ビジター判定: ビジター
チーム位置による判定: ビジター
会場要素の構造確認:
  会場要素数: 2
  会場0: 東京ドーム
  会場1: 東京ドーム
会場抽出完了: 東京ドーム
会場ホーム判定: 東京ドーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: 東京ドーム)
判定一致: ビジター (信頼度: high)

stdout | src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > extractGameScore > 負けの場合
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "14" (class: game-vs-teams__team-score)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "14" (class: game-vs-teams__team-score)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 2個
    0: "1" (class: , tag: EM)
    1: "4" (class: , tag: SPAN)
  数字要素の最初の2個をスコアとして使用
スコア抽出完了: ホーム1 - ビジター4 (loss)

 ✓ src/tests/parsers/teamExtractor.test.ts (5 tests) 27ms
stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる
会場要素の構造確認:
  会場要素数: 0

stdout | src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合
試合ステータス検出: completed (デフォルト)

stdout | src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > detectGameStatus > 中止の場合
試合ステータス検出: cancelled (テキストベース)

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: undefined, 画像1個
    画像0: /images/logo_2004001.png
  チーム1: undefined, 画像1個
    画像0: /images/other_team.png
ファイターズロゴをチーム0で発見: logo_2004001
ホーム/ビジター判定: ホーム
チーム位置による判定: ホーム
会場要素の構造確認:
  会場要素数: 0
チーム位置のみで判定: ホーム (信頼度: medium)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした

stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出
会場要素の構造確認:
  会場要素数: 0

stdout | src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > detectGameStatus > 延期の場合
試合ステータス検出: postponed (テキストベース)

 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出
会場要素の構造確認:
  会場要素数: 0

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: undefined, 画像1個
    画像0: /images/other_team.png
  チーム1: undefined, 画像1個
    画像0: /images/logo_2004.png
ファイターズロゴをチーム1で発見: logo_2004
ホーム/ビジター判定: ビジター
チーム位置による判定: ビジター
会場要素の構造確認:
  会場要素数: 0
チーム位置のみで判定: ビジター (信頼度: medium)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした

 ✓ src/tests/parsers/homeVisitorDetector.test.ts (4 tests) 44ms
stdout | src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出
会場要素の構造確認:
  会場要素数: 0

 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
試合HTML解析を開始...
対戦相手: 千葉ロッテ
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "48" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "48" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 2個
    0: "4" (class: , tag: EM)
    1: "8" (class: , tag: SPAN)
  数字要素の最初の2個をスコアとして使用
スコア抽出完了: ホーム4 - ビジター8 (loss)
会場要素の構造確認:
  会場要素数: 2
  会場0: ホーム
  会場1: ビジター
会場抽出完了: ホーム
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: ホーム, 画像1個
    画像0: /media/sites/2/common/teamlogo/2024/logo_2004001_l.png
  チーム1: ビジター, 画像1個
    画像0: /media/sites/2/common/teamlogo/2024/logo_1992001_l.png
ファイターズロゴをチーム0で発見: logo_2004001
ホーム/ビジター判定: ホーム
チーム位置による判定: ホーム
会場要素の構造確認:
  会場要素数: 2
  会場0: ホーム
  会場1: ビジター
会場抽出完了: ホーム
会場ホーム判定: ホーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: ホーム)
試合ステータス検出: completed (デフォルト)
試合HTML解析完了: {
  opponent: [32m'千葉ロッテ'[39m,
  myScore: [33m4[39m,
  vsScore: [33m8[39m,
  location: [32m'ホーム'[39m,
  isHomeGame: [33mtrue[39m,
  result: [32m'lose'[39m
}
  判定詳細: 方法=team-position, 信頼度=medium
  試合状況: completed

stderr | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
判定不一致: チーム位置(true) vs 会場(false) -> チーム位置を採用 (信頼度: medium)

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
試合HTML解析を開始...
対戦相手: オリックス
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "37" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "37" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 2個
    0: "3" (class: , tag: SPAN)
    1: "7" (class: , tag: EM)
  数字要素の最初の2個をスコアとして使用
スコア抽出完了: ホーム3 - ビジター7 (loss)
会場要素の構造確認:
  会場要素数: 2
  会場0: ホーム
  会場1: ビジター
会場抽出完了: ホーム
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: ホーム, 画像1個
    画像0: /media/sites/2/common/teamlogo/2024/logo_1992001_l.png
  チーム1: ビジター, 画像1個
    画像0: /media/sites/2/common/teamlogo/2024/logo_2004001_l.png
ファイターズロゴをチーム1で発見: logo_2004001
ホーム/ビジター判定: ビジター
チーム位置による判定: ビジター
会場要素の構造確認:
  会場要素数: 2
  会場0: ホーム
  会場1: ビジター
会場抽出完了: ホーム
会場ホーム判定: ホーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: ホーム)
判定一致: ビジター (信頼度: high)
試合ステータス検出: completed (デフォルト)
試合HTML解析完了: {
  opponent: [32m'オリックス'[39m,
  myScore: [33m7[39m,
  vsScore: [33m3[39m,
  location: [32m'ホーム'[39m,
  isHomeGame: [33mfalse[39m,
  result: [32m'win'[39m
}
  判定詳細: 方法=team-position, 信頼度=high
  試合状況: completed

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
試合HTML解析を開始...
対戦相手: 千葉ロッテ
スコア要素の構造確認:
  .game-vs-teams__team-run: 0個
  .game-vs-teams__team-score: 1個
    0: "22" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  .team-run: 0個
  .team-score: 0個
  .score: 0個
  .run: 0個
  [class*="run"]: 0個
  [class*="score"]: 1個
    0: "22" (class: game-vs-teams__team-score game-vs-teams__team-score--game-end)
  従来のセレクターで見つからないため、数字要素を検索...
  数字のみの要素: 2個
    0: "2" (class: , tag: SPAN)
    1: "2" (class: , tag: EM)
  数字要素の最初の2個をスコアとして使用
スコア抽出完了: ホーム2 - ビジター2 (draw)
会場要素の構造確認:
  会場要素数: 2
  会場0: ホーム
  会場1: ビジター
会場抽出完了: ホーム
ホーム/ビジター判定を開始...
チーム要素の構造確認:
  チーム0: ホーム, 画像1個
    画像0: /media/sites/2/common/teamlogo/2024/logo_1992001_l.png
  チーム1: ビジター, 画像1個
    画像0: /media/sites/2/common/teamlogo/2024/logo_2004001_l.png
ファイターズロゴをチーム1で発見: logo_2004001
ホーム/ビジター判定: ビジター
チーム位置による判定: ビジター
会場要素の構造確認:
  会場要素数: 2
  会場0: ホーム
  会場1: ビジター
会場抽出完了: ホーム
会場ホーム判定: ホーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: ホーム)
判定一致: ビジター (信頼度: high)
試合ステータス検出: completed (デフォルト)
試合HTML解析完了: {
  opponent: [32m'千葉ロッテ'[39m,
  myScore: [33m2[39m,
  vsScore: [33m2[39m,
  location: [32m'ホーム'[39m,
  isHomeGame: [33mfalse[39m,
  result: [32m'draw'[39m
}
  判定詳細: 方法=team-position, 信頼度=high
  試合状況: completed

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる
試合HTML解析を開始...

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 108ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 24ms
     → スコア要素が期待値と異なります
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 35ms
     → expected '千葉ロッテ' to be '楽天イーグルス' // Object.is equality
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 20ms
     → expected 7 to be 8 // Object.is equality
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 24ms
     → expected '千葉ロッテ' to be 'ソフトバンク' // Object.is equality
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 2ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 3ms

⎯⎯⎯⎯⎯⎯ Failed Tests 12 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
ParseError: スコア要素が期待値と異なります
 ❯ extractGameScore src/lib/parsers/scoreExtractor.ts:77:13
     75| 
     76|     if (scoreElements.length !== 2) {
     77|       throw new ParseError(`スコア要素が期待値と異なります`, 'extractGameScore', {
       |             ^
     78|         expected: 2,
     79|         found: scoreElements.length,
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:17:23
 ❯ src/tests/parsers/gameParser.integration.test.ts:16:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
AssertionError: expected '千葉ロッテ' to be '楽天イーグルス' // Object.is equality

Expected: [32m"楽天イーグルス"[39m
Received: [31m"千葉ロッテ"[39m

 ❯ src/tests/parsers/gameParser.integration.test.ts:30:31
     28|       const result = parseGameHTML(html);
     29| 
     30|       expect(result.opponent).toBe('楽天イーグルス');
       |                               ^
     31|       expect(result.myScore).toBe(2); // ファイターズ2点
     32|       expect(result.vsScore).toBe(7); // 相手7点

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
AssertionError: expected 7 to be 8 // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- 8[39m
[31m+ 7[39m

 ❯ src/tests/parsers/gameParser.integration.test.ts:43:30
     41| 
     42|       expect(result.opponent).toBe('オリックス');
     43|       expect(result.myScore).toBe(8); // ファイターズ8点（ビジター）
       |                              ^
     44|       expect(result.vsScore).toBe(3); // 相手3点
     45|       expect(result.location).toBe('京セラドーム大阪');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
AssertionError: expected '千葉ロッテ' to be 'ソフトバンク' // Object.is equality

Expected: [32m"ソフトバンク"[39m
Received: [31m"千葉ロッテ"[39m

 ❯ src/tests/parsers/gameParser.integration.test.ts:54:31
     52|       const result = parseGameHTML(html);
     53| 
     54|       expect(result.opponent).toBe('ソフトバンク');
       |                               ^
     55|       expect(result.myScore).toBe(4); // ファイターズ4点（ビジター）
     56|       expect(result.vsScore).toBe(4); // 相手4点

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/12]⎯

 FAIL  src/tests/parsers/scoreExtractor.test.ts > scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き）
ParseError: スコア要素が期待値と異なります
 ❯ extractGameScore src/lib/parsers/scoreExtractor.ts:77:13
     75| 
     76|     if (scoreElements.length !== 2) {
     77|       throw new ParseError(`スコア要素が期待値と異なります`, 'extractGameScore', {
       |             ^
     78|         expected: 2,
     79|         found: scoreElements.length,
 ❯ src/tests/parsers/scoreExtractor.test.ts:13:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出
ParseError: game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ extractGameVenue src/lib/parsers/venueExtractor.ts:23:13
     21| 
     22|     if (venueElements.length === 0) {
     23|       throw new ParseError(
       |             ^
     24|         'game-vs-teams__team-stadium要素が見つかりませんでした',
     25|         'extractGameVenue',
 ❯ src/tests/parsers/venueExtractor.test.ts:11:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > エスコンフィールドの場合
ParseError: game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ extractGameVenue src/lib/parsers/venueExtractor.ts:23:13
     21| 
     22|     if (venueElements.length === 0) {
     23|       throw new ParseError(
       |             ^
     24|         'game-vs-teams__team-stadium要素が見つかりませんでした',
     25|         'extractGameVenue',
 ❯ src/tests/parsers/venueExtractor.test.ts:20:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > ビジター球場の場合
ParseError: game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ extractGameVenue src/lib/parsers/venueExtractor.ts:23:13
     21| 
     22|     if (venueElements.length === 0) {
     23|       throw new ParseError(
       |             ^
     24|         'game-vs-teams__team-stadium要素が見つかりませんでした',
     25|         'extractGameVenue',
 ❯ src/tests/parsers/venueExtractor.test.ts:29:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる
AssertionError: expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'

Expected: [32m"game-vs[7m__text[27m要素が見つかりませんでした"[39m
Received: [31m"game-vs[7m-teams__team-stadium[27m要素が見つかりませんでした"[39m

 ❯ src/tests/parsers/venueExtractor.test.ts:36:44
     34|       const html = '<div>No venue elements</div>';
     35|       
     36|       expect(() => extractGameVenue(html)).toThrow('game-vs__text要素が見つ…
       |                                            ^
     37|     });
     38|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出
ParseError: game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ extractGameVenue src/lib/parsers/venueExtractor.ts:23:13
     21| 
     22|     if (venueElements.length === 0) {
     23|       throw new ParseError(
       |             ^
     24|         'game-vs-teams__team-stadium要素が見つかりませんでした',
     25|         'extractGameVenue',
 ❯ extractVenueLocationInfo src/lib/parsers/venueExtractor.ts:65:23
 ❯ src/tests/parsers/venueExtractor.test.ts:46:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出
ParseError: game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ extractGameVenue src/lib/parsers/venueExtractor.ts:23:13
     21| 
     22|     if (venueElements.length === 0) {
     23|       throw new ParseError(
       |             ^
     24|         'game-vs-teams__team-stadium要素が見つかりませんでした',
     25|         'extractGameVenue',
 ❯ extractVenueLocationInfo src/lib/parsers/venueExtractor.ts:65:23
 ❯ src/tests/parsers/venueExtractor.test.ts:57:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/12]⎯

 FAIL  src/tests/parsers/venueExtractor.test.ts > venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出
ParseError: game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ extractGameVenue src/lib/parsers/venueExtractor.ts:23:13
     21| 
     22|     if (venueElements.length === 0) {
     23|       throw new ParseError(
       |             ^
     24|         'game-vs-teams__team-stadium要素が見つかりませんでした',
     25|         'extractGameVenue',
 ❯ extractVenueLocationInfo src/lib/parsers/venueExtractor.ts:65:23
 ❯ src/tests/parsers/venueExtractor.test.ts:68:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/12]⎯


 Test Files  3 failed | 2 passed (5)
      Tests  12 failed | 16 passed (28)
   Start at  15:16:24
   Duration  470ms (transform 69ms, setup 0ms, collect 123ms, tests 260ms, environment 1.01s, prepare 178ms)

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/lib/parsers/teamExtractor.ts 

 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
試合HTML解析を開始...

 ❯ src/tests/parsers/teamExtractor.test.ts (5 tests | 5 failed) 5ms
   × teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出 2ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す 0ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる 3ms
     → expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got '(0 , extractOpp…'
   × teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
   × teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる
試合HTML解析を開始...

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 5ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 3ms
     → HTML解析中にエラーが発生しました
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 1ms
     → HTML解析中にエラーが発生しました
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 0ms
     → HTML解析中にエラーが発生しました
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 0ms
     → HTML解析中にエラーが発生しました
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 0ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 0ms
stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 2
  会場0: 札幌ドーム
  会場1: 札幌ドーム
会場抽出完了: 札幌ドーム
会場ホーム判定: 札幌ドーム -> ホーム (信頼度: high)
会場による判定: ホーム (会場: 札幌ドーム)
会場のみで判定: ホーム (信頼度: low)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
チーム位置による判定に失敗: (0 , __vite_ssr_import_0__.detectFightersTeamPosition) is not a function

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 2
  会場0: 東京ドーム
  会場1: 東京ドーム
会場抽出完了: 東京ドーム
会場ホーム判定: 東京ドーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: 東京ドーム)
会場のみで判定: ビジター (信頼度: low)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
チーム位置による判定に失敗: (0 , __vite_ssr_import_0__.detectFightersTeamPosition) is not a function

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 0

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
チーム位置による判定に失敗: (0 , __vite_ssr_import_0__.detectFightersTeamPosition) is not a function
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした
全ての判定に失敗、デフォルトでビジターを設定 (信頼度: low)

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 0

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
チーム位置による判定に失敗: (0 , __vite_ssr_import_0__.detectFightersTeamPosition) is not a function
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした
全ての判定に失敗、デフォルトでビジターを設定 (信頼度: low)

 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 24ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 12ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 5ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 4ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 3ms

⎯⎯⎯⎯⎯⎯ Failed Tests 12 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出
TypeError: (0 , extractOpponentTeam) is not a function
 ❯ src/tests/parsers/teamExtractor.test.ts:12:22
     10|       `;
     11|       
     12|       const result = extractOpponentTeam(html);
       |                      ^
     13|       expect(result).toBe('オリックス');
     14|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/12]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す
TypeError: (0 , extractOpponentTeam) is not a function
 ❯ src/tests/parsers/teamExtractor.test.ts:22:22
     20|       `;
     21|       
     22|       const result = extractOpponentTeam(html);
       |                      ^
     23|       expect(result).toBe('広島東洋カープ');
     24|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/12]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる
AssertionError: expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got '(0 , extractOpp…'

Expected: [32m"c-game-detail__header-text要素が見つかりませんでした"[39m
Received: [31m"(0 , __vite_ssr_import_1__.extractOpponentTeam) is not a function"[39m

 ❯ src/tests/parsers/teamExtractor.test.ts:29:47
     27|       const html = '<div>No team elements</div>';
     28|       
     29|       expect(() => extractOpponentTeam(html)).toThrow('c-game-detail__…
       |                                               ^
     30|     });
     31|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/12]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合
TypeError: (0 , detectFightersTeamPosition) is not a function
 ❯ src/tests/parsers/teamExtractor.test.ts:46:22
     44|       `;
     45|       
     46|       const result = detectFightersTeamPosition(html);
       |                      ^
     47|       expect(result.name).toBe('北海道日本ハム');
     48|       expect(result.isHome).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/12]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合
TypeError: (0 , detectFightersTeamPosition) is not a function
 ❯ src/tests/parsers/teamExtractor.test.ts:63:22
     61|       `;
     62|       
     63|       const result = detectFightersTeamPosition(html);
       |                      ^
     64|       expect(result.name).toBe('北海道日本ハム');
     65|       expect(result.isHome).toBe(false);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:16:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:28:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:40:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/12]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:52:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/12]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
AssertionError: expected 'venue-based' to be 'team-position' // Object.is equality

Expected: [32m"team-position"[39m
Received: [31m"venue-based"[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:21:29
     19|       const result = detectHomeVisitor(html);
     20|       expect(result.isHome).toBe(true);
     21|       expect(result.method).toBe('team-position');
       |                             ^
     22|       expect(result.confidence).toBe('high');
     23|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/12]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
AssertionError: expected 'venue-based' to be 'team-position' // Object.is equality

Expected: [32m"team-position"[39m
Received: [31m"venue-based"[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:40:29
     38|       const result = detectHomeVisitor(html);
     39|       expect(result.isHome).toBe(false);
     40|       expect(result.method).toBe('team-position');
       |                             ^
     41|       expect(result.confidence).toBe('high');
     42|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/12]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:58:22
     56|       
     57|       const result = isHomeGame(html);
     58|       expect(result).toBe(true);
       |                      ^
     59|     });
     60| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/12]⎯


 Test Files  5 failed (5)
      Tests  20 failed | 8 passed (28)
   Start at  15:21:12
   Duration  78ms

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/lib/parsers/gameParser.ts x2 

 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 24ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 12ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 5ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 4ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 3ms
 ❯ src/tests/parsers/teamExtractor.test.ts (5 tests | 5 failed) 5ms
   × teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出 2ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す 0ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる 3ms
     → expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got '(0 , extractOpp…'
   × teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
   × teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる
試合HTML解析を開始...

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 4ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 2ms
     → HTML解析中にエラーが発生しました
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 0ms
     → HTML解析中にエラーが発生しました
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 0ms
     → HTML解析中にエラーが発生しました
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 0ms
     → HTML解析中にエラーが発生しました
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 1ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 0ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 4 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:16:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/4]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:28:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/4]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:40:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/4]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
ParseError: HTML解析中にエラーが発生しました
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:67:11
     65|       throw error;
     66|     }
     67|     throw new ParseError('HTML解析中にエラーが発生しました', 'parseGameHTML', {
       |           ^
     68|       originalError: error,
     69|     });
 ❯ src/tests/parsers/gameParser.integration.test.ts:52:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/4]⎯


 Test Files  5 failed (5)
      Tests  20 failed | 8 passed (28)
   Start at  15:22:01
   Duration  13ms

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/lib/parsers/gameParser.ts x3 

 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 24ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 12ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 5ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 4ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 3ms
 ❯ src/tests/parsers/teamExtractor.test.ts (5 tests | 5 failed) 5ms
   × teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出 2ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す 0ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる 3ms
     → expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got '(0 , extractOpp…'
   × teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
   × teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる
試合HTML解析を開始...

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 44ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 17ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 7ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 6ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 8ms
     → 自チームが特定できません
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 3ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 2ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 4 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:16:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/4]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:28:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/4]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:40:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/4]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:52:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/4]⎯


 Test Files  5 failed (5)
      Tests  20 failed | 8 passed (28)
   Start at  15:22:06
   Duration  53ms

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/lib/parsers/homeVisitorDetector.ts 

 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ src/tests/parsers/teamExtractor.test.ts (5 tests | 5 failed) 5ms
   × teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出 2ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す 0ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる 3ms
     → expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got '(0 , extractOpp…'
   × teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
   × teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 2
  会場0: 札幌ドーム
  会場1: 札幌ドーム
会場抽出完了: 札幌ドーム
会場ホーム判定: 札幌ドーム -> ホーム (信頼度: high)
会場による判定: ホーム (会場: 札幌ドーム)
会場のみで判定: ホーム (信頼度: low)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
チーム位置による判定に失敗: detectFightersTeamPosition is not defined

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 2
  会場0: 東京ドーム
  会場1: 東京ドーム
会場抽出完了: 東京ドーム
会場ホーム判定: 東京ドーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: 東京ドーム)
会場のみで判定: ビジター (信頼度: low)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
チーム位置による判定に失敗: detectFightersTeamPosition is not defined

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 0

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
チーム位置による判定に失敗: detectFightersTeamPosition is not defined
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした
全ての判定に失敗、デフォルトでビジターを設定 (信頼度: low)

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 0

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
チーム位置による判定に失敗: detectFightersTeamPosition is not defined
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした
全ての判定に失敗、デフォルトでビジターを設定 (信頼度: low)

 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 22ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 12ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 4ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 3ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 3ms
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる
試合HTML解析を開始...

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 47ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 19ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 7ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 6ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 6ms
     → 自チームが特定できません
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 6ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 2ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 7 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:16:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/7]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:28:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/7]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:40:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/7]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:52:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/7]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
AssertionError: expected 'venue-based' to be 'team-position' // Object.is equality

Expected: [32m"team-position"[39m
Received: [31m"venue-based"[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:21:29
     19|       const result = detectHomeVisitor(html);
     20|       expect(result.isHome).toBe(true);
     21|       expect(result.method).toBe('team-position');
       |                             ^
     22|       expect(result.confidence).toBe('high');
     23|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/7]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
AssertionError: expected 'venue-based' to be 'team-position' // Object.is equality

Expected: [32m"team-position"[39m
Received: [31m"venue-based"[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:40:29
     38|       const result = detectHomeVisitor(html);
     39|       expect(result.isHome).toBe(false);
     40|       expect(result.method).toBe('team-position');
       |                             ^
     41|       expect(result.confidence).toBe('high');
     42|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/7]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:58:22
     56|       
     57|       const result = isHomeGame(html);
     58|       expect(result).toBe(true);
       |                      ^
     59|     });
     60| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/7]⎯


 Test Files  5 failed (5)
      Tests  20 failed | 8 passed (28)
   Start at  15:22:13
   Duration  91ms

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/lib/parsers/homeVisitorDetector.ts 

 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ src/tests/parsers/teamExtractor.test.ts (5 tests | 5 failed) 5ms
   × teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出 2ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す 0ms
     → (0 , extractOpponentTeam) is not a function
   × teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる 3ms
     → expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got '(0 , extractOpp…'
   × teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
   × teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合 0ms
     → (0 , detectFightersTeamPosition) is not a function
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 2
  会場0: 札幌ドーム
  会場1: 札幌ドーム
会場抽出完了: 札幌ドーム
会場ホーム判定: 札幌ドーム -> ホーム (信頼度: high)
会場による判定: ホーム (会場: 札幌ドーム)
会場のみで判定: ホーム (信頼度: low)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
チーム位置による判定に失敗: 自チームが特定できません

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 2
  会場0: 東京ドーム
  会場1: 東京ドーム
会場抽出完了: 東京ドーム
会場ホーム判定: 東京ドーム -> ビジター (信頼度: low)
会場による判定: ビジター (会場: 東京ドーム)
会場のみで判定: ビジター (信頼度: low)

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
チーム位置による判定に失敗: 自チームが特定できません

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 0

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
チーム位置による判定に失敗: 自チームが特定できません
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした
全ての判定に失敗、デフォルトでビジターを設定 (信頼度: low)

stdout | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
ホーム/ビジター判定を開始...
会場要素の構造確認:
  会場要素数: 0

stderr | src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す
チーム位置による判定に失敗: 自チームが特定できません
会場による判定に失敗: game-vs-teams__team-stadium要素が見つかりませんでした
全ての判定に失敗、デフォルトでビジターを設定 (信頼度: low)

 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 42ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 21ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 6ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 8ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 6ms
stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる
試合HTML解析を開始...

stdout | src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる
試合HTML解析を開始...

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 48ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 18ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 8ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 6ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 10ms
     → 自チームが特定できません
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 3ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 2ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 7 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:16:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/7]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:28:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/7]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:40:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/7]⎯

 FAIL  src/tests/parsers/gameParser.integration.test.ts > gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析
ParseError: 自チームが特定できません
 ❯ extractMyTeamName src/lib/parsers/teamExtractor.ts:61:9
     59|   }
     60| 
     61|   throw new ParseError('自チームが特定できません', 'extractMyTeamName');
       |         ^
     62| }
     63| 
 ❯ extractVsTeam src/lib/parsers/teamExtractor.ts:18:22
 ❯ parseGameHTML src/lib/parsers/gameParser.ts:16:22
 ❯ src/tests/parsers/gameParser.integration.test.ts:52:22

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/7]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合
AssertionError: expected 'venue-based' to be 'team-position' // Object.is equality

Expected: [32m"team-position"[39m
Received: [31m"venue-based"[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:21:29
     19|       const result = detectHomeVisitor(html);
     20|       expect(result.isHome).toBe(true);
     21|       expect(result.method).toBe('team-position');
       |                             ^
     22|       expect(result.confidence).toBe('high');
     23|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/7]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合
AssertionError: expected 'venue-based' to be 'team-position' // Object.is equality

Expected: [32m"team-position"[39m
Received: [31m"venue-based"[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:40:29
     38|       const result = detectHomeVisitor(html);
     39|       expect(result.isHome).toBe(false);
     40|       expect(result.method).toBe('team-position');
       |                             ^
     41|       expect(result.confidence).toBe('high');
     42|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/7]⎯

 FAIL  src/tests/parsers/homeVisitorDetector.test.ts > homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す
AssertionError: expected false to be true // Object.is equality

[32m- Expected[39m
[31m+ Received[39m

[32m- true[39m
[31m+ false[39m

 ❯ src/tests/parsers/homeVisitorDetector.test.ts:58:22
     56|       
     57|       const result = isHomeGame(html);
     58|       expect(result).toBe(true);
       |                      ^
     59|     });
     60| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/7]⎯


 Test Files  5 failed (5)
      Tests  20 failed | 8 passed (28)
   Start at  15:22:19
   Duration  108ms

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/tests/parsers/teamExtractor.test.ts x2 

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 48ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 18ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 8ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 6ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 10ms
     → 自チームが特定できません
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 3ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 2ms
 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 42ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 21ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 6ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 8ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 6ms
 ❯ src/tests/parsers/teamExtractor.test.ts (5 tests | 5 failed) 4ms
   × teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出 2ms
     → extractOpponentTeam is not defined
   × teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す 0ms
     → extractOpponentTeam is not defined
   × teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる 2ms
     → expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got 'extractOpponentTeam is not defined'
   × teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合 0ms
     → detectFightersTeamPosition is not defined
   × teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合 0ms
     → detectFightersTeamPosition is not defined

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 5 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > 正常なHTMLから対戦相手チーム名を抽出
ReferenceError: extractOpponentTeam is not defined
 ❯ src/tests/parsers/teamExtractor.test.ts:12:22
     10|       `;
     11|       
     12|       const result = extractOpponentTeam(html);
       |                      ^
     13|       expect(result).toBe('オリックス');
     14|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/5]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > ファイターズ以外のチーム名のみ返す
ReferenceError: extractOpponentTeam is not defined
 ❯ src/tests/parsers/teamExtractor.test.ts:22:22
     20|       `;
     21|       
     22|       const result = extractOpponentTeam(html);
       |                      ^
     23|       expect(result).toBe('広島東洋カープ');
     24|     });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/5]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > extractOpponentTeam > チーム名要素が見つからない場合はエラーを投げる
AssertionError: expected [Function] to throw error including 'c-game-detail__header-text要素が見つかりませんで…' but got 'extractOpponentTeam is not defined'

Expected: [32m"c-game-detail__header-text要素が見つかりませんでした"[39m
Received: [31m"extractOpponentTeam is not defined"[39m

 ❯ src/tests/parsers/teamExtractor.test.ts:29:47
     27|       const html = '<div>No team elements</div>';
     28|       
     29|       expect(() => extractOpponentTeam(html)).toThrow('c-game-detail__…
       |                                               ^
     30|     });
     31|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/5]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > detectFightersTeamPosition > ファイターズがホームチーム（0番目）の場合
ReferenceError: detectFightersTeamPosition is not defined
 ❯ src/tests/parsers/teamExtractor.test.ts:46:22
     44|       `;
     45|       
     46|       const result = detectFightersTeamPosition(html);
       |                      ^
     47|       expect(result.name).toBe('北海道日本ハム');
     48|       expect(result.isHome).toBe(true);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/5]⎯

 FAIL  src/tests/parsers/teamExtractor.test.ts > teamExtractor > detectFightersTeamPosition > ファイターズがビジターチーム（1番目）の場合
ReferenceError: detectFightersTeamPosition is not defined
 ❯ src/tests/parsers/teamExtractor.test.ts:63:22
     61|       `;
     62|       
     63|       const result = detectFightersTeamPosition(html);
       |                      ^
     64|       expect(result.name).toBe('北海道日本ハム');
     65|       expect(result.isHome).toBe(false);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/5]⎯


 Test Files  5 failed (5)
      Tests  20 failed | 8 passed (28)
   Start at  15:22:26
   Duration  9ms

 FAIL  Tests failed. Watching for file changes...
       press h to show help, press q to quit
c[3J RERUN  src/tests/parsers/teamExtractor.test.ts x3 

 ❯ src/tests/parsers/gameParser.integration.test.ts (6 tests | 4 failed) 48ms
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム勝利（サヨナラ勝ち）を正しく解析 18ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ホームゲーム敗戦を正しく解析 8ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム勝利を正しく解析 6ms
     → 自チームが特定できません
   × gameParser integration tests > parseGameHTML with real HTML patterns > ビジターゲーム引き分けを正しく解析 10ms
     → 自チームが特定できません
   ✓ gameParser integration tests > edge cases and error handling > 不完全なHTMLでエラーを適切に投げる 3ms
   ✓ gameParser integration tests > edge cases and error handling > チーム名が見つからない場合エラーを投げる 2ms
 ❯ src/tests/parsers/scoreExtractor.test.ts (6 tests | 1 failed) 39ms
   × scoreExtractor > extractGameScore > 正常なスコア要素から抽出（サヨナラ勝ちのx付き） 16ms
     → スコア要素が期待値と異なります
   ✓ scoreExtractor > extractGameScore > 引き分けの場合 8ms
   ✓ scoreExtractor > extractGameScore > 負けの場合 4ms
   ✓ scoreExtractor > detectGameStatus > 通常の試合（開催済み）の場合 4ms
   ✓ scoreExtractor > detectGameStatus > 中止の場合 3ms
   ✓ scoreExtractor > detectGameStatus > 延期の場合 3ms
 ❯ src/tests/parsers/venueExtractor.test.ts (7 tests | 7 failed) 43ms
   × venueExtractor > extractGameVenue > 正常なHTMLから会場名を抽出 13ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > エスコンフィールドの場合 4ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > ビジター球場の場合 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractGameVenue > 会場要素が見つからない場合はエラーを投げる 8ms
     → expected [Function] to throw error including 'game-vs__text要素が見つかりませんでした' but got 'game-vs-teams__team-stadium要素が見つかりません…'
   × venueExtractor > extractVenueLocationInfo > 札幌ドームはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > エスコンフィールドはホーム球場として検出 3ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
   × venueExtractor > extractVenueLocationInfo > 他の球場はビジター球場として検出 8ms
     → game-vs-teams__team-stadium要素が見つかりませんでした
 ❯ src/tests/parsers/homeVisitorDetector.test.ts (4 tests | 3 failed) 42ms
   × homeVisitorDetector > detectHomeVisitor > ホーム球場でファイターズが0番目の場合 21ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > detectHomeVisitor > ビジター球場でファイターズが1番目の場合 6ms
     → expected 'venue-based' to be 'team-position' // Object.is equality
   × homeVisitorDetector > isHomeGame > シンプルなホーム判定を返す 8ms
     → expected false to be true // Object.is equality
   ✓ homeVisitorDetector > isHomeGame > シンプルなビジター判定を返す 6ms
 ✓ src/tests/parsers/teamExtractor.test.ts (6 tests) 35ms

 Test Files  4 failed | 1 passed (5)
      Tests  15 failed | 14 passed (29)
   Start at  15:22:54
   Duration  41ms

 PASS  Waiting for file changes...
       press h to show help, press q to quit
Cancelling test run. Press CTRL+c again to exit forcefully.

